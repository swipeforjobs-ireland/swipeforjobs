// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  phone             String?
  isEmailVerified   Boolean  @default(false)
  subscriptionTier  SubscriptionTier @default(FREE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  profile           UserProfile?
  cvs              CV[]
  applications     JobApplication[]
  subscription     Subscription?
  usageTracking    UsageTracking[]

  @@map("users")
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  location    String?
  linkedinUrl String?
  cvFileUrl   String?
  preferences Json?   // Store job preferences as JSON
  
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// CV Management
model CV {
  id           String   @id @default(cuid())
  userId       String
  originalText String
  parsedData   Json?    // Structured CV data from AI parsing
  skills       String[] // Array of skills
  experienceYears Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions     CVVersion[]
  applications JobApplication[]

  @@map("cvs")
}

model CVVersion {
  id              String   @id @default(cuid())
  cvId            String
  jobId           String?
  optimizedContent String  // AI-optimized CV content for specific job
  createdAt       DateTime @default(now())

  // Relations
  cv              CV  @relation(fields: [cvId], references: [id], onDelete: Cascade)
  job             Job? @relation(fields: [jobId], references: [id])

  @@map("cv_versions")
}

// Job Data
model Job {
  id           String   @id @default(cuid())
  title        String
  company      String
  location     String?
  description  String
  requirements String?
  salaryRange  String?
  sourceBoard  String   // e.g., "IrishJobs.ie", "Jobs.ie"
  externalId   String?  // ID from the job board
  url          String?  // Original job posting URL
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  applications JobApplication[]
  cvVersions   CVVersion[]

  @@unique([sourceBoard, externalId])
  @@map("jobs")
}

model JobApplication {
  id          String            @id @default(cuid())
  userId      String
  jobId       String
  cvId        String
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job                  @relation(fields: [jobId], references: [id])
  cv          CV                   @relation(fields: [cvId], references: [id])
  responses   ApplicationResponse[]

  @@map("job_applications")
}

model ApplicationResponse {
  id            String      @id @default(cuid())
  applicationId String
  responseType  ResponseType
  receivedAt    DateTime    @default(now())
  details       String?     // Additional details about the response

  // Relations
  application   JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_responses")
}

// Subscription & Billing
model Subscription {
  id                String          @id @default(cuid())
  userId            String          @unique
  tier              SubscriptionTier
  status            SubscriptionStatus @default(ACTIVE)
  stripeCustomerId  String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model UsageTracking {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @default(now())
  applicationsSent Int     @default(0)
  tierLimit       Int      // Daily limit based on subscription tier
  overages        Int      @default(0)

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("usage_tracking")
}

// Enums
enum SubscriptionTier {
  FREE
  STUDENT
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

enum ApplicationStatus {
  PENDING
  SENT
  VIEWED
  RESPONDED
  REJECTED
  INTERVIEW_SCHEDULED
  OFFER_RECEIVED
}

enum ResponseType {
  ACKNOWLEDGMENT
  REJECTION
  INTERVIEW_REQUEST
  OFFER
  REQUEST_FOR_INFO
}